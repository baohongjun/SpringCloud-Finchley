server:
  port: 8081
spring:
  #指定程序的spring的启动文件为after_route文件
  #profiles:
    #predicates
    #active: after_route
    #active: header_route
    #active: cookie_route
    #active: host_route
    #active: method_route
    #active: path_route
    #active: query_route
    #filters
    #active: add_request_header_route
    #active: rewritepath_route
    active: elapse_route

#After Route Predicate Factory  当请求的时间在配置时间之后，才交给 router去处理；否则则报错，不通过路由。
#application.yml再建一个配置文件，语法是三个横线。配置文件中通过spring.profiles来配置文件名，和spring.profiles.active一致
---
spring:
  cloud:
    gateway:
      routes:
        - id: after_route
          uri: http://httpbin.org:80/get
          predicates:
            - After=2021-07-05T09:30:47.789-07:00[America/Denver]
  profiles: after_route

#Header Route Predicate Factory 2个参数，一个是header名，另外一个header值，该值可以是一个正则表达式
---
spring:
  cloud:
    gateway:
      routes:
        - id: header_route
          uri: http://httpbin.org:80/get
          predicates:
            - Header=X-Request-Id, \d+
  profiles: header_route
#Cookie Route Predicate Factory 2个参数，一个是cookie名字，另一个是值，可以为正则表达式
---
spring:
  cloud:
    gateway:
      routes:
        - id: cookie_route
          uri: http://httpbin.org:80/get
          predicates:
            - Cookie=name, baohj
  profiles: cookie_route
#Host Route Predicate Factory 一个参数即hostname，它可以使用. * 等去匹配host。这个参数会匹配请求头中的host的值，一致，则请求正确转发
---
spring:
  cloud:
    gateway:
      routes:
        - id: host_route
          uri: http://httpbin.org:80/get
          predicates:
            - Host=**.baohj.com
  profiles: host_route
#Method Route Predicate Factory 一个参数，即请求的类型。比如GET类型的请求都转发到此路由
---
spring:
  cloud:
    gateway:
      routes:
        - id: method_route
          uri: http://httpbin.org:80/get
          predicates:
            - Method=GET
  profiles: method_route
#Path Route Predicate Factory 一个参数: 一个spel表达式，应用匹配路径
---
spring:
  cloud:
    gateway:
      routes:
        - id: path_route
          uri: http://httpbin.org:80/get
          predicates:
            - Path=/foo/{segment}
  profiles: path_route
#Query Route Predicate Factory  2个参数:一个参数名和一个参数值的正则表达式
---
spring:
  cloud:
    gateway:
      routes:
        - id: query_route
          uri: http://httpbin.org:80/get
          predicates:
            - Query=foo, \d+
  profiles: query_route

#AddRequestHeader GatewayFilter Factory 一个filter为AddRequestHeaderGatewayFilterFactory(约定写成AddRequestHeader)
---
spring:
  cloud:
    gateway:
      routes:
        - id: add_request_header_route
          uri: http://httpbin.org:80/get
          filters:
            - AddRequestHeader=X-Request-Foo, Bar
          predicates:
            - After=2021-06-20T17:42:47.789-07:00[America/Denver]
  profiles: add_request_header_route

#RewritePath GatewayFilter Factory
---
spring:
  cloud:
    gateway:
      routes:
        - id: rewritepath_route
          uri: https://blog.csdn.net
          predicates:
            - Path=/foo/**
          #RewritePath过滤器工厂，此工厂将/foo/(?.*)重写为{segment}，然后转发到https://blog.csdn.net
          filters:
            - RewritePath=/foo/(?<segment>.*), /$\{segment}
  profiles: rewritepath_route
#自定义过滤器工厂
---
spring:
  cloud:
    gateway:
      routes:
        - id: elapse_route
          uri: http://httpbin.org:80/get
          filters:
            - RequestTime=false
          predicates:
            - After=2021-06-30T17:42:47.789-07:00[America/Denver]
  profiles: elapse_route
